/* Auto-generated by genmsg_cpp for file /nishome/nlpros/ros/rosbuild_ws/segbot_nlp/msg/VoiceCommand.msg */
#ifndef SEGBOT_NLP_MESSAGE_VOICECOMMAND_H
#define SEGBOT_NLP_MESSAGE_VOICECOMMAND_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace segbot_nlp
{
template <class ContainerAllocator>
struct VoiceCommand_ {
  typedef VoiceCommand_<ContainerAllocator> Type;

  VoiceCommand_()
  : commandCode(0)
  , distance(0.0)
  , angle(0.0)
  , location(0)
  , numTimes(0)
  , commandText()
  {
  }

  VoiceCommand_(const ContainerAllocator& _alloc)
  : commandCode(0)
  , distance(0.0)
  , angle(0.0)
  , location(0)
  , numTimes(0)
  , commandText(_alloc)
  {
  }

  typedef int32_t _commandCode_type;
  int32_t commandCode;

  typedef float _distance_type;
  float distance;

  typedef float _angle_type;
  float angle;

  typedef int32_t _location_type;
  int32_t location;

  typedef int32_t _numTimes_type;
  int32_t numTimes;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _commandText_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  commandText;


  typedef boost::shared_ptr< ::segbot_nlp::VoiceCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::segbot_nlp::VoiceCommand_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct VoiceCommand
typedef  ::segbot_nlp::VoiceCommand_<std::allocator<void> > VoiceCommand;

typedef boost::shared_ptr< ::segbot_nlp::VoiceCommand> VoiceCommandPtr;
typedef boost::shared_ptr< ::segbot_nlp::VoiceCommand const> VoiceCommandConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::segbot_nlp::VoiceCommand_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::segbot_nlp::VoiceCommand_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace segbot_nlp

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::segbot_nlp::VoiceCommand_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::segbot_nlp::VoiceCommand_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::segbot_nlp::VoiceCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3f928abb425ceda8389063403b3f9534";
  }

  static const char* value(const  ::segbot_nlp::VoiceCommand_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3f928abb425ceda8ULL;
  static const uint64_t static_value2 = 0x389063403b3f9534ULL;
};

template<class ContainerAllocator>
struct DataType< ::segbot_nlp::VoiceCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "segbot_nlp/VoiceCommand";
  }

  static const char* value(const  ::segbot_nlp::VoiceCommand_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::segbot_nlp::VoiceCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 commandCode\n\
float32 distance\n\
float32 angle\n\
int32 location\n\
int32 numTimes\n\
string commandText\n\
\n\
";
  }

  static const char* value(const  ::segbot_nlp::VoiceCommand_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::segbot_nlp::VoiceCommand_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.commandCode);
    stream.next(m.distance);
    stream.next(m.angle);
    stream.next(m.location);
    stream.next(m.numTimes);
    stream.next(m.commandText);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct VoiceCommand_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::segbot_nlp::VoiceCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::segbot_nlp::VoiceCommand_<ContainerAllocator> & v) 
  {
    s << indent << "commandCode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.commandCode);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "location: ";
    Printer<int32_t>::stream(s, indent + "  ", v.location);
    s << indent << "numTimes: ";
    Printer<int32_t>::stream(s, indent + "  ", v.numTimes);
    s << indent << "commandText: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.commandText);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SEGBOT_NLP_MESSAGE_VOICECOMMAND_H

